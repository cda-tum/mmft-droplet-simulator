// generated by TSEMBIND

// define type aliases for various native number types
// type Char = number;
// type SignedChar = number;
// type UnsignedChar = number;
// type Short = number;
// type UnsignedShort = number;
// type Int = number;
// type UnsignedInt = number;
// type Long = number;
// type UnsignedLong = number;
// type Float = number;
// type Double = number;


export class Simulator {
	constructor();

	addChannel(node0Id: number, node1Id: number, height: number, width: number, length: number): number;
	addBypassChannel(node0Id: number, node1Id: number, height: number, width: number, length: number): number;
	addFlowRatePump(node0Id: number, node1Id: number, flowRate: number): number;
	addPressurePump(node0Id: number, node1Id: number, pressure: number): number;
	addSink(nodeId: number): void;
	addGround(nodeId: number): void;
	checkChipValidity(): boolean;
	addFluid(viscosity: number, density: number, concentration: number): number;
	setContinuousPhase(fluidId: number): void;
	setMaximalAdaptiveTimeStep(timeStep: number): void;
	addDroplet(fluidId: number, volume: number, injectionTime: number, channelId: number, relInjectionPosition: number): number;
	simulate(): SimulationResult;
	delete(): void;
}

export class SimulationResult {
	constructor();

	toJson(indent: number): string;
	continuousPhaseId: number
	maximalAdaptiveTimeStep: number
	resistanceModel: number
	delete(): void;
}

export interface MyModule extends EmscriptenModule {
	Simulator: typeof Simulator
	SimulationResult: typeof SimulationResult
}

const myModule: MyModule;

export default myModule;
