// generated by TSEMBIND

// define type aliases for various native number types
type Char = number;
type SignedChar = number;
type UnsignedChar = number;
type Short = number;
type UnsignedShort = number;
type Int = number;
type UnsignedInt = number;
type Long = number;
type UnsignedLong = number;
type Float = number;
type Double = number;


export class Simulator {
	constructor();

	addChannel(arg0: Int, arg1: Int, arg2: Double, arg3: Double, arg4: Double): Int;

	addBypassChannel(arg0: Int, arg1: Int, arg2: Double, arg3: Double, arg4: Double): Int;

	addFlowRatePump(arg0: Int, arg1: Int, arg2: Double): Int;

	addPressurePump(arg0: Int, arg1: Int, arg2: Double): Int;

	addSink(arg0: Int): void;

	addGround(arg0: Int): void;

	checkChipValidity(): boolean;

	addFluid(arg0: Double, arg1: Double, arg2: Double): Int;

	setContinuousPhase(arg0: Int): void;

	setMaximalAdaptiveTimeStep(arg0: Double): void;

	addDroplet(arg0: Int, arg1: Double, arg2: Double, arg3: Int, arg4: Double): Int;

	simulate(): SimulationResult;
	delete(): void;
}

export class SimulationResult {
	constructor();

	toJson(arg0: Int): string;
	continuousPhaseId: Int
	maximalAdaptiveTimeStep: Double
	resistanceModel: Int
	delete(): void;
}

export interface MyModule extends EmscriptenModule {
	Simulator: typeof Simulator
	SimulationResult: typeof SimulationResult
}

const myModule: MyModule;

export default myModule;
